// Методы
// at(index) - по индексу получаем символ в строке, новый метод, позволяет принимать отрицательные индексы.
// charAt - старый метод, но актуален. Не опзволяет работать с отрицательными индексами.

// fromCharCode(index) - Индексом является число, метод возвращает символ, который соответствует числу в UTF-16
// charCodeAt(index) - принимает индекс символа в строке, возвращает целое число между 0 и 65535 представляющую кодовую единицу по UTF-16

// fromCodePoint(index) - принимает число - код символа Unicode, возвращает символ.
// codePointAt(index) - принимает индекс символа в строке, возвращает код символа в Unicode

// Unicode: Это стандарт, определяющий уникальные числовые значения для каждого символа, используемого в текстовых процессах по всему миру. Целью Unicode является предоставление универсального и однозначного способа представления текста, независимо от языка или платформы. 

// UTF-16: Это один из форматов кодирования, используемых для представления символов Юникода в памяти компьютера и при передаче текста по сети. В UTF-16 каждому символу Юникода назначается 16-битный кодовый номер.

// Итак, основное различие между UTF-16 и Unicode заключается в том, что Unicode определяет символы и их уникальные числовые значения, а UTF-16 - это один из способов кодирования этих символов в памяти компьютера или при передаче данных. UTF-16 является формой кодирования символов Юникода, где каждый символ может занимать 16 или 32 бита в памяти, в зависимости от его кодового номера.

// string.includes(matchStr, index) - поиск по string совпадений с matchStr, начиная с index, который по умолчанию 0. Возвращает true/false

// string.split(separator, limit) -  метод возвращает массив подстрок, разделенных separator. Если не указан, вернет массив с одним элементом - полной строкой. limit - лимит на кол. элементов в массиве

// string.concat(...arg) - объединяет строку с аргументами и возвращает новую строку

// string.endWith(searchString, endPos) - возвращает тру/фолс, в зависимости от того, нашел ли searchString в конце строки, или по endPos если оно указано

// string.indexOf(searchString, position) - ищет подстроку в аргументе, начиная с индекса position, и возвращает index нахождений, или -1

// string.lastIndexOf() - тоже самое, только индекс последнего вхождения

// string.match(regExp) - возвращает результаты поиска по регулярному выражению. Если стоит флаг g - вернет массив со всеми совпадениями. Если нет - массив с первым совпадением и доп свойствами. Если нет аргумента - вернет массив с доп свойствами.

// string.matchAll(regExp) - возвращает итератор всех результатов, соответствующих этой строке регулярному выражению , включая группы захвата. В регулярке должен быть флаг g глобал.

// string.normalize(NFC, NFD, NFKC, NFKD) - используется для нормализации строки, позволяя вам привести ее к одному из четырех стандартных форм нормализации Unicode.

// string.padEnd(targetLength, padString) - первый арг - какой должна быть итоговая длинна строки на выходе (не может быть меньше string.length), второй арг - подстрока, которой заполняется строка в конце.

// string.padStart() - тоже самое, только с начала строки.

// string.repeat(quntity) - создает новую строку указанное количество раз

// string.replace(pattern, replacemant) - заменяет паттерн в строке на реплейсмент. Что бы заменить все совпадения - регулярка с флагом глобал.

// string.replaceAll() - то же самое, только ко всем совпадениям.

// string.search(regExp) - индекс совпадения с регуляркой, или -1 если ненайдено.

// string.slice(indexStart, indexEnd) - извлекает часть этой строки и возвращает ее как новую строку, не изменяя исходную строку.

// string.startsWith() - определяет, начинается ли эта строка с символов указанной строки, возвращаемых trueили falseсоответствующих. Аналогично методу endWith

// string.substring(startIndex, endIndex) - то же самое, что и splice, но не работает с отрицательными индексами

// string.toLowerCase() - преобразует строку в нижний регистр

// string.toUpperCase() - строку в верхний регистр

// string.trim() - убирает пробелы с обеих концов строки, не меняя исходную строку

// string.trimEnd() - убирает пробелы с конца

// string.trimStart() - убирает пробелы с начала

// string.localeCompare(compareString, locales, options) - возвращает -1 если string встречается раньше чем compareString, 0 если эквивалентны, 1 если позже. Сравнивает строки посимвольно, можно задавать настройки в locales и options

